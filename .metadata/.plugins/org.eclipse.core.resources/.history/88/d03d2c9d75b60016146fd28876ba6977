package dominio;

import java.io.Serializable;
import java.util.HashSet;
import java.util.Set;

import javax.persistence.Entity;
import javax.persistence.GeneratedValue;
import javax.persistence.Id;
import javax.persistence.ManyToMany;
import javax.persistence.ManyToOne;
import javax.persistence.OneToMany;

import controle.ITabelavel;
import dominio.RegraDeDominio;
import dominio.DadosException;
import dominio.ErroDeDominio;
import dominio.IDados;

/**
 * Implementa a classe Questão que tem o "implements Serializable" para realizar
 * o processo de serialização e o "implements Tabelavel" para informar que os
 * objetos poderão ser exibidos em uma tabela de interface
 * 
 *
 */

@Entity
public class Questao implements IDados, ITabelavel, Serializable {

	private enum Status {
		EmElaboracao, Disponivel, EmAplicacao;

		public static void validarTransicaoStatus(Status anterior, Status novo) throws DadosException {
			if (anterior == null && novo == Disponivel || anterior == EmElaboracao && novo == Disponivel
					|| anterior == EmElaboracao && novo == EmAplicacao || anterior == Disponivel && novo == EmElaboracao
					|| anterior == Disponivel && novo == EmElaboracao)
				return;
		}

	};

	// Atributos
	@Id
	@GeneratedValue
	private Long id;
	private Status status;
	private String textoHtml;
	@OneToMany(mappedBy = "questao")
	private Set<Peso> peso = new HashSet<Peso>();
	@OneToMany(mappedBy = "questao")
	private Set<Responde> responde = new HashSet<Responde>();
	@OneToMany(mappedBy = "questao")
	private Set<Opcao> opcao = new HashSet<Opcao>();
	@OneToMany(mappedBy = "questao")
	private Set<Foto> foto = new HashSet<Foto>();
	@ManyToOne
	private Professor professor;

	// Métodos
	public Questao(Long id, Status status, String textoHtml, Professor professor) throws DadosException {
		super();
		this.id = id;
		this.setStatus(status.EmElaboracao);// estado inicial
		this.setTextoHtml(textoHtml);
		this.setProfessor(professor);

	}

	public Questao() {
		super();
	}

	public Long getId() {
		return id;
	}

	public void setId(Long id) {
		this.id = id;
	}

	public Status getStatus() {
		return this.status;
	}

	public void setStatus(Status novo) throws DadosException {
		status.validarTransicaoStatus(this.status, novo);
		this.status = novo;
	}

	public String getTextoHtml() {
		return textoHtml;
	}

	public void setTextoHtml(String textoHtml) throws DadosException {
		validarTexto(textoHtml);
		this.textoHtml = textoHtml;
	}

	public Set<Peso> getPeso() {
		return peso;
	}

	// metodo adiciona Peso do atributo de relacionamento n-ário
	public void adicionaPeso(Peso peso) throws DadosException {
		if (this.peso.contains(peso))
			return;
		this.peso.add(peso);
		peso.setQuestão(this);

	}

	// metodo remove Peso do atributo de relacionamento n-ário

	public void removePeso(Peso peso) throws DadosException {
		if (!this.peso.contains(peso))
			return;
		this.peso.remove(peso);
		peso.setQuestão(null);

	}

	public Set<Responde> getResponde() {
		return responde;
	}

	// metodo adiciona resposta do atributo de relacionamento n-ário
	public void adicionaResposta(Responde responde) throws DadosException {
		if (this.responde.contains(responde))
			return;
		this.responde.add(responde);
		responde.setQuestão(this);

	}

	// metodo remove resposta do atributo de relacionamento n-ário
	public void removeResposta(Responde responde) throws DadosException {
		if (!this.responde.contains(responde))
			return;
		this.responde.remove(responde);
		responde.setQuestão(null);

	}

	public Set<Opcao> getOpcao() {
		return opcao;
	}

	// metodo adiciona Opção do atributo de relacionamento n-ário
	public void adicionaOpcao(Opcao opcao) throws DadosException {
		if (this.opcao.contains(opcao))
			return;
		this.opcao.add(opcao);
		opcao.setQuestão(this);

	}

	// metodo remove Opção do atributo de relacionamento n-ário
	public void removeOpcao(Opcao opcao) throws DadosException {
		if (!this.opcao.contains(opcao))
			return;
		this.opcao.remove(opcao);
		opcao.setQuestão(null);

	}

	// metodo adiciona Foto do atributo de relacionamento n-ário
	public void adicionaFoto(Foto foto) throws DadosException {
		if (this.foto.contains(foto))
			return;
		this.foto.add(foto);
		foto.setQuestao(this);

	}

	// metodo remove Foto do atributo de relacionamento n-ário
	public void removeFoto(Foto foto) throws DadosException {
		if (!this.foto.contains(foto))
			return;
		this.foto.remove(foto);
		foto.setQuestao(null);

	}

	public Professor getProfessor() {
		return professor;
	}

	public void setProfessor(Professor professor) throws DadosException {
		if (this.professor == professor)
			return;
		if (this.professor == null) {
			this.setStatus(Status.EmElaboracao);
			Professor antigo = this.professor;
			this.professor = null;
			antigo.removeQuestao(this);

		} else {
			this.setStatus(Status.Disponivel);
			if (this.professor != null) {

				this.professor.removeQuestao(this);
				this.professor = professor;
				professor.adicionaQuestao(this);

			}

		}

	}

	/**
	 * Implementação do método toString que retorna uma String que descreve o
	 * objeto Questão
	 */
	public String toString() {
		return "Questão [textoHtml=" + textoHtml + "]";
	}

	// validação dos atributos
	@RegraDeDominio
	public void validarTexto(String t) throws DadosException {
		if (t == null || t.length() == 0)
			throw new DadosException(new ErroDeDominio(1, "O Texto não pode ser nulo"));
	}

	@RegraDeDominio
	public void validarPeso(Peso peso) throws DadosException {
		if (peso == null)
			throw new DadosException(new ErroDeDominio(2, "O Peso não pode ser nulo"));
	}

	@RegraDeDominio
	public void validarResponde(Responde responde) throws DadosException {
		// Não há regras de validação
	}

	@RegraDeDominio
	public void validarOpcao(Opcao opcao) throws DadosException {
		// Não há regras de validação
	}

	/**
	 * Retorna um array de Objects com os estados dos atributos dos objetos
	 * 
	 * @return
	 */
	public Object[] getData() {
		return new Object[] { this.textoHtml };
	}

	public Object getChave() {
		return id;
	}

}
